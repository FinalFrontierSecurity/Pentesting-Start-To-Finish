Description: >-
  This template deploys a VPC, with a pair of public and private subnets spread
  across two Availability Zones. It deploys an internet gateway, with a default
  route on the public subnets. It deploys a pair of NAT gateways (one in each
  AZ), and default routes for them in the private subnets.
Parameters:
  EnvironmentName:
    Description: An environment name that is prefixed to resource names
    Type: String
    Default: SaintCon-2023
  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.10.0.0/16
  PublicSubnet1CIDR:
    Description: >-
      Please enter the IP range (CIDR notation) for the public subnet in the
      first Availability Zone
    Type: String
    Default: 10.10.20.0/24
  PublicSubnet2CIDR:
    Description: >-
      Please enter the IP range (CIDR notation) for the public subnet in the
      second Availability Zone
    Type: String
    Default: 10.10.10.0/24
  PrivateSubnet1CIDR:
    Description: >-
      Please enter the IP range (CIDR notation) for the private subnet in the
      first Availability Zone
    Type: String
    Default: 10.10.30.0/24
Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName
  InternetGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
  PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select 
        - 0
        - !GetAZs ''
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName} Public Subnet (AZ1)'
  PublicSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select 
        - 1
        - !GetAZs ''
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName} Public Subnet (AZ2)'
  PrivateSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select 
        - 0
        - !GetAZs ''
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName} Private Subnet (AZ1)'
  NatGateway1EIP:
    Type: 'AWS::EC2::EIP'
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc
  NatGateway2EIP:
    Type: 'AWS::EC2::EIP'
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc
  NatGateway1:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: !GetAtt NatGateway1EIP.AllocationId
      SubnetId: !Ref PublicSubnet1
  NatGateway2:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: !GetAtt NatGateway2EIP.AllocationId
      SubnetId: !Ref PublicSubnet2
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName} Public Routes'
  DefaultPublicRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1
  PublicSubnet2RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2
  PrivateRouteTable1:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName} Private Routes (AZ1)'
  DefaultPrivateRoute1:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1
  PrivateSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1
  NoIngressSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: no-ingress-sg
      GroupDescription: Security group with no ingress rule
  OperatorBox:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: ami-06f3e82cbc99ff267
      InstanceType: t2.micro
      KeyName: operator.pem
      SubnetId: !Ref PublicSubnet2
      SecurityGroupIds:
        - !GetAtt OperatorBoxSecurityGroup.GroupId
      Tags:
        - Key: "Name"
          Value: "attack-box"
          
  ElasticIP:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc
      InstanceId: !Ref OperatorBox
  OperatorBoxSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: OperatorBoxSG
      GroupDescription: >-
        Allow all traffic from the private subnet to the OperatorBox and only
        SSH from the world
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 3389
          ToPort: 3389
          CidrIp: 0.0.0.0/0
        - IpProtocol: -1
          CidrIp: 10.0.0.0/8
  WebHackThis:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: ami-08140599c952e7d30
      InstanceType: t2.micro
      KeyName: admin.pem
      SubnetId: !Ref PublicSubnet1
      SecurityGroupIds:
        - !GetAtt TargetPublicSG.GroupId
      Tags:
        - Key: "Name"
          Value: "web.hack.this"

  ThumbnailerHackThis:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: ami-01a39779dbb6737d4
      InstanceType: t2.micro
      KeyName: admin.pem
      SubnetId: !Ref PublicSubnet1
      IamInstanceProfile: !Ref ThumbnailerRoleInstanceProfile
      SecurityGroupIds:
        - !GetAtt TargetPublicSG.GroupId
      UserData:
        'Fn::Base64': !Sub |
          #!/bin/bash
          #Quick script to add dev account to web servers
          useradd -m dev -s /bin/bash -m && echo "dev:AeOPG6L197DW" | chpasswd
      Tags:
        - Key: "Name"
          Value: "thumbnailer.hack.this"

  TargetPublicSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: TargetPublic
      GroupDescription: >-
        Allow all traffic from the private subnet to the OperatorBox and only
        SSH from the world
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: -1
          CidrIp: 10.0.0.0/8
  DevHackInternal:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: ami-07e3d4a9e9eaecb6d
      InstanceType: t2.micro
      KeyName: admin.pem
      SubnetId: !Ref PrivateSubnet1
      SecurityGroupIds:
        - !GetAtt TargetPrivateSG.GroupId
      Tags:
        - Key: "Name"
          Value: "dev.hack.internal"

  AdminHackInternal:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: ami-00769ec1690c322bf
      InstanceType: t2.micro
      KeyName: admin.pem
      SubnetId: !Ref PrivateSubnet1
      SecurityGroupIds:
        - !GetAtt TargetPrivateSG.GroupId
      UserData:
        'Fn::Base64': !Sub |
          6f70707f0c80f6329535e875a7e9ac6d
      Tags:
        - Key: "Name"
          Value: "admin.hack.internal"

  TargetPrivateSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: TargetPrivate
      GroupDescription: Private security group
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: -1
          CidrIp: 10.10.20.0/24
        - IpProtocol: -1
          CidrIp: 10.10.30.0/24
  HackThisDNS:
    Type: 'AWS::Route53::HostedZone'
    Properties:
      HostedZoneConfig:
        Comment: zone for hack.this
      Name: hack.this
      VPCs:
        - VPCId: !Ref VPC
          VPCRegion: us-east-1

  HackInternalDNS:
    Type: 'AWS::Route53::HostedZone'
    Properties:
      HostedZoneConfig:
        Comment: Zone for hack.internal
      Name: hack.internal
      VPCs:
        - VPCId: !Ref VPC
          VPCRegion: us-east-1
  WebHackThisDNSRecord:
    Type: 'AWS::Route53::RecordSet'
    Properties:
      HostedZoneId: !Ref HackThisDNS
      Comment: DNS name for my instance.
      Name: web.hack.this
      Type: A
      TTL: 900
      ResourceRecords:
        - !GetAtt WebHackThis.PrivateIp
  ThumbnailerHackThisDNSRecord:
    Type: 'AWS::Route53::RecordSet'
    Properties:
      HostedZoneId: !Ref HackThisDNS
      Comment: DNS name for my instance.
      Name: thumbnailer.hack.this
      Type: A
      TTL: 900
      ResourceRecords:
        - !GetAtt ThumbnailerHackThis.PrivateIp
  DevHackInternalDNSRecord:
    Type: 'AWS::Route53::RecordSet'
    Properties:
      HostedZoneId: !Ref HackInternalDNS
      Comment: DNS name for my instance.
      Name: dev.hack.internal
      Type: A
      TTL: 900
      ResourceRecords:
        - !GetAtt DevHackInternal.PrivateIp
  AdminHackInternalDNSRecord:
    Type: 'AWS::Route53::RecordSet'
    Properties:
      HostedZoneId: !Ref HackInternalDNS
      Comment: DNS name for my instance.
      Name: admin.hack.internal
      Type: A
      TTL: 900
      ResourceRecords:
        - !GetAtt AdminHackInternal.PrivateIp
  ThumbnailerRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonEC2FullAccess'
        - 'arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess'
  ThumbnailerRoleInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - Ref: ThumbnailerRole
  S3Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Join 
        - '-'
        - - thumbnailer-bucket-
          - !Select 
            - 0
            - !Split 
              - '-'
              - !Select 
                - 2
                - !Split 
                  - /
                  - !Ref 'AWS::StackId'
Outputs:
  VPC:
    Description: A reference to the created VPC
    Value: !Ref VPC
  PublicSubnets:
    Description: A list of the public subnets
    Value: !Join 
      - ','
      - - !Ref PublicSubnet1
        - !Ref PublicSubnet2
  PublicSubnet1:
    Description: A reference to the public subnet in the 1st Availability Zone
    Value: !Ref PublicSubnet1
  PublicSubnet2:
    Description: A reference to the public subnet in the 2nd Availability Zone
    Value: !Ref PublicSubnet2
  PrivateSubnet1:
    Description: A reference to the private subnet in the 1st Availability Zone
    Value: !Ref PrivateSubnet1
  NoIngressSecurityGroup:
    Description: Security group with no ingress rule
    Value: !Ref NoIngressSecurityGroup